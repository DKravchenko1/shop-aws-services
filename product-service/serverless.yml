service: product-service

frameworkVersion: '3.30'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  profile: denis-kravchenko
  stage: dev
  environment:
    PRODUCT_TABLE_NAME: "ProductTable"
    STOCK_TABLE_NAME: "StockTable"
    CART_TABLE: "CartTable"
    CATALOG_ITEMS_QUEUE_NAME: "catalogItemsQueue"
    CREATE_PRODUCT_SNS_TOPIC: "createProductTopic"
  httpApi:
    cors: true
    authorizers:
      httpApiRequestAuthorizer:
        name: 'httpApiRequestAuthorizer'
        functionArn: ${ssm:AuthArn}
        type: 'request'
        enableSimpleResponses: true
        payloadVersion: '2.0'
        identitySource:
          - $request.header.Authorization
  logs:
    httpApi: true
  iam:
    role:
      name: DynamoDBAccessRole
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:ConditionCheckItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
            - dynamodb:GetItem
            - dynamodb:PutItem
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
            - sqs:ReceiveMessage
          Resource: "*"
        - Effect: Allow
          Action:
            - lambda:CreateEventSourceMapping
            - lambda:ListEventSourceMappings
            - lambda:ListFunctions
          Resource:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
        - Effect: "Allow"
          Action:
            - sns:Publish
            - sns:Subscribe
          Resource: "*"
        - Effect: Allow
          Action:
            - lambda:invokeFunction
          Resource: "*"

plugins:
  - serverless-webpack
  - serverless-functions-base-path

custom:
  functionsBasePath: product-service-handlers
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true
    keepOutputDirectory: true

resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PRODUCT_TABLE_NAME}
    StockTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.STOCK_TABLE_NAME}
    CartTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CART_TABLE}
    CatalogItemsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.CATALOG_ITEMS_QUEUE_NAME}
    ImportParsedFileSNSToAddDataSQSPolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        Queues:
          - Ref: CatalogItemsQueue
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Sid: "SNS to SQS"
              Effect: Allow
              Principal:
                Service: "sns.amazonaws.com"
              Resource: !GetAtt CatalogItemsQueue.Arn
              Action: SQS:SendMessage
              Condition:
                ArnEquals:
                  aws:SourceArn: !ImportValue ImportParsedDataTopicSNSArn
    CreateProductSNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${self:provider.environment.CREATE_PRODUCT_SNS_TOPIC}
    CreateProductSNSTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn: !Ref CreateProductSNSTopic
        Endpoint: denis_kravchenko1@epam.com
        FilterPolicyScope: MessageBody
        FilterPolicy:
          title:
            - prefix: "ui-"
    ErrorCreateProductSNSTopicSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        TopicArn: !Ref CreateProductSNSTopic
        Endpoint: kravchenkoDenis1992@gmail.com
        FilterPolicyScope: MessageBody
        FilterPolicy:
          title:
            - prefix: "csv-"
  Outputs:
    CatalogItemsQueueOutput:
      Value: !GetAtt CatalogItemsQueue.Arn
      Export:
        Name: CatalogItemsQueueArn

functions:
  getProductById:
    handler: get-product-by-id/get-product-by-id.handler
    events:
      - httpApi:
          method: GET
          path: /products/{id}
          authorizer:
            name: httpApiRequestAuthorizer

  getProductsList:
    handler: get-products-list/get-products-list.handler
    events:
      - httpApi:
          method: GET
          path: /products
          authorizer:
            name: httpApiRequestAuthorizer

  createProduct:
    handler: create-product/create-product.handler
    events:
      - httpApi:
          method: POST
          path: /products
          authorizer:
            name: httpApiRequestAuthorizer

  catalogBatchProcess:
    handler: catalog-batch-process/catalog-batch-process.handler
    environment:
      TOPIC_ARN:
        Ref: CreateProductSNSTopic
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - CatalogItemsQueue
              - Arn
          batchSize: 5
          maximumBatchingWindow: 30
