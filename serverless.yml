service: product-service

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  profile: denis-kravchenko
  stage: dev
  environment:
    PRODUCT_TABLE_NAME: "ProductTable"
    STOCK_TABLE_NAME: "StockTable"
    CART_TABLE: "CartTable"
  cors: true
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:ConditionCheckItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:GetItem
        - dynamodb:PutItem
      Resource: "*"

plugins:
  - serverless-webpack
  - serverless-functions-base-path

custom:
  functionsBasePath: product-service/product-service-handlers
  webpack:
    webpackConfig: "./webpack.config.js"
    includeModules: true
    keepOutputDirectory: true

resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.PRODUCT_TABLE_NAME}
    StockTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.STOCK_TABLE_NAME}
    CartTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: "product_id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "product_id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.CART_TABLE}


functions:
  getProductById:
    handler: get-product-by-id/get-product-by-id.handler
    events:
      - http:
          method: GET
          path: products/{id}
          cors: true

  getProductsList:
    handler: get-products-list/get-products-list.handler
    events:
      - http:
          method: GET
          path: products
          cors: true

  createProduct:
    handler: create-product/create-product.handler
    events:
      - http:
          method: POST
          path: products
          cors: true

  setItemToCart:
    handler: set-product-to-cart/set-product-to-cart.handler
    events:
      - http:
          method: POST
          path: profile/cart
          cors: true
